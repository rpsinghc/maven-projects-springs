package com.worldcheck.atlas.frontend.sbm;

import com.savvion.sbm.util.PService;
import com.worldcheck.atlas.exception.CMSException;
import com.worldcheck.atlas.logging.producer.ILogProducer;
import com.worldcheck.atlas.logging.producer.LogProducerImpl;
import com.worldcheck.atlas.utils.AtlasUtils;
import com.worldcheck.atlas.utils.ExposePropertyPlaceholderConfigurer;
import com.worldcheck.atlas.utils.ResourceLocator;
import java.io.IOException;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

public class AtlasResetPasswordServlet extends HttpServlet {
	private ILogProducer logger = LogProducerImpl.getLogger("com.worldcheck.atlas.frontEnd.AtlasResetPasswordServlet");
	private static final long serialVersionUID = 1L;
	private String m_subject = "Atlas Password Changed";
	String m_messageTemp = "";
	ExposePropertyPlaceholderConfigurer propertyConfigurer = null;

	public void setPropertyConfigurer(ExposePropertyPlaceholderConfigurer propertyConfigurer) {
		this.propertyConfigurer = propertyConfigurer;
	}

	protected void doGet(HttpServletRequest request, HttpServletResponse response)
			throws ServletException, IOException {
		this.logger.debug("Entring AtlasResetPasswordServlet : doGet");
		String token = request.getParameter("Param1");
		String userId = request.getParameter("Param2");
		this.logger.debug("token" + token + "userId" + userId);
		String userIdDecr = PService.self().decrypt(userId).toLowerCase();
		this.logger.debug("user Name :::::::::::::::: " + userIdDecr);
		boolean istokenValid = false;

		try {
			long userIdVal = ResourceLocator.self().getSBMService().getUserID(userIdDecr);
			istokenValid = ResourceLocator.self().getUserService().isTokenValid(token, "" + userIdVal);
			this.logger.debug("Token Values:::::" + istokenValid);
			if (istokenValid) {
				String tempPassword = AtlasUtils.generatePassword();
				String passwordEncr = PService.self().encrypt(tempPassword);
				ResourceLocator.self().getUserService().updateTempPassword(token, "" + userIdVal, passwordEncr);
				String forcePassword = ResourceLocator.self().getUserService().forgotPasswordUpdate(userIdDecr);
				this.logger.debug("forcePassword::" + forcePassword);
				String to_EmailId = ResourceLocator.self().getSBMService().getEmailId(userIdDecr);
				this.logger.debug("Email ID ID " + to_EmailId);
				this.m_messageTemp = this.m_messageTemp + "Temporary password for the Login ID:  " + userIdDecr
						+ " has been generated by system. Please use this password to reset the password for your account \n\r"
						+ "Temp Password :\t" + tempPassword + "\n\r "
						+ "You will need to choose a new password to login to the system on successful reset of the new password.\n\r"
						+ "\n\r Thank you.\n\rThomson Reuters \n\r\n\rrisk.thomsonreuters.com \n\r*********************************************************************************************** \n\rThis email was sent to you by Thomson Reuters,the global news and Information Company.\r Any views expressed in this message are those of the individual sender,\rexcept where the sender specifically states them to be the views of Thomson Reuters. \r************************************************************************************************ ";
				ResourceLocator.self().getMailService().sendEmail(this.m_subject, to_EmailId, this.m_messageTemp);
				this.m_messageTemp = "";
				response.sendRedirect("/sbm/bpmportal/atlas/reset_password.jsp");
			}
		} catch (CMSException var14) {
			var14.printStackTrace();
		}

	}
}