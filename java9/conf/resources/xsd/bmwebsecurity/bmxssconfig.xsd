<?xml version="1.0" encoding="ISO-8859-1" ?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema">

    <xsd:element name="xss-config">
        <xsd:annotation>
            <xsd:documentation>
                <xsd:description>Root element for the XSS configuration</xsd:description>
                <xsd:LineNumber>Root Element</xsd:LineNumber>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexType >
            <xsd:sequence>
                <xsd:element name="xss-conditions" type="xss-conditions" minOccurs="0" maxOccurs="1"/>
                <xsd:element name="xss-actions" type="xss-actions" minOccurs="0" maxOccurs="1"/>
                <xsd:element name="xss-rules" type="xss-rules" minOccurs="0" maxOccurs="unbounded" />
                <xsd:element name="exclude-url-patterns" type="exclude-url-patterns" minOccurs="0" maxOccurs="1"/>
            </xsd:sequence>
        </xsd:complexType>
    </xsd:element>

    <xsd:complexType name="xss-conditions">
        <xsd:annotation>
            <xsd:documentation>
                <xsd:description>define preconditions to be processed by XSS engine. </xsd:description>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="element-detection-pattern" minOccurs="0" maxOccurs="1">
                <xsd:annotation>
                    <xsd:documentation>
                        <xsd:description>
                            if the argument text matches the patten specified here, it will be processed by the xss engine.
                            In case when it does not match the pattern, it may still process text value specified in unmatched-content-action-type attribute.
                        </xsd:description>
                    </xsd:documentation>
                </xsd:annotation>
                <xsd:complexType>
                    <xsd:simpleContent>
                        <xsd:extension base="xsd:string">
                            <xsd:attribute name="unmatched-content-action-type" type="unmatched-content-action-type" default='HTML_ESCAPE' />
                        </xsd:extension>
                    </xsd:simpleContent>
                </xsd:complexType>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:simpleType name="unmatched-content-action-type">
        <xsd:annotation>
            <xsd:documentation>
                <xsd:description>
                    HTML_ESCAPE: will convert special html characters to use escape chapacers.
                    NO_ACTION: do not change the input text value.
                </xsd:description>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="HTML_ESCAPE"/>
            <xsd:enumeration value="NO_ACTION"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="xss-actions">
        <xsd:annotation>
            <xsd:documentation>
                <xsd:description>
                    This describes the semantics of action when tag/attribues are not accepted by the xss rules.
                    unaccepted-tag-action-type: defines the type of action taken for unaccepted tags.
                    unaccepted-attribute-action-type: defines the type of action taken for unaccepted attributes.
                    the optional attribues 'enabled' (default true) can be used to skip attribute check(namely accept any attributes).
                    This may increase speed of xss process, but in general, javascript may be embeded in attributes, this option makes unreliable as a xss engine for the most of the case.
                    so this option should not be used.
                </xsd:description>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="unaccepted-tag-action-type" type="tag-action-type" minOccurs="0" maxOccurs="1"/>
            <xsd:element name="unaccepted-attribute-action-type" minOccurs="0" maxOccurs="1">
                <xsd:complexType>
                    <xsd:simpleContent>
                        <xsd:extension base="attribute-action-type">
                            <xsd:attribute name="enabled" type="xsd:boolean" default="true" />
                        </xsd:extension>
                    </xsd:simpleContent>
                </xsd:complexType>
            </xsd:element>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="xss-rules">
        <xsd:annotation>
            <xsd:documentation>
                <xsd:description>
                    rules for XSS tag/attribute are defined here. a rule defines whether or not the tag/attribute is accepted or rejected.
                    a common rule defines an action(accept/reject) for an attribute against all tags except explicitly declarated tags. 
                    a tag rule defines an action(accept/reject) for each tag with actions for the attributes.
                    if there are duplicate actions defined for the same tag/attribute, the last rule will be used.
                    'import' can be used to splits large xss-rules in severals files.
                </xsd:description>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="import" type="import" minOccurs="0" maxOccurs="unbounded" />
            <xsd:element name="accept-common-attr" type="accept-common-attr-rule" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="accept-tag" type="accept-tag-rule" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="reject-common-attr" type="reject-common-attr-rule" minOccurs="0" maxOccurs="unbounded"/>
            <xsd:element name="reject-tag" type="reject-tag-rule" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attribute name="name" type="xsd:string"/>
    </xsd:complexType>

    <xsd:simpleType name="tag-action-type">
        <xsd:annotation>
            <xsd:documentation>
                <xsd:description>
                    defines the action type for rejected tag.
                    FILTER: Removes the tag, but keeps the content.
                    REMOVE: Removes tag along with the content in it.
                    ENCODE: Encodes the tag, so that the tag with the content is displayed, but not executed when rendered in the browser.
                    THROW_EXCEPTION: Throws exceptions to the user.
                    APPLY_CDATA: Applies the content with the CDATA tag.
                </xsd:description>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="FILTER"/>
            <xsd:enumeration value="REMOVE"/>
            <xsd:enumeration value="ENCODE"/>
            <xsd:enumeration value="THROW_EXCEPTION"/>
            <xsd:enumeration value="APPLY_CDATA"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:simpleType name="attribute-action-type">
        <xsd:annotation>
            <xsd:documentation>
                <xsd:description>
                    defines the action type for rejected attribues.
                    REMOVE: the attribute is removed from the output string/text
                    ENCODE_VALUE: the attribute value content are encoded so as not to be processed by browser etc.
                    THROW_EXCEPTION: just throw exception when it meet reject tag.
                </xsd:description>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:restriction base="xsd:string">
            <xsd:enumeration value="REMOVE"/>
            <xsd:enumeration value="ENCODE_VALUE"/>
            <xsd:enumeration value="THROW_EXCEPTION"/>
        </xsd:restriction>
    </xsd:simpleType>

    <xsd:complexType name="exclude-url-patterns">
        <xsd:annotation>
            <xsd:documentation>
                <xsd:description>
                    This exclude url's list is used to list all the urls that must be excluded from checking for the XSS
attacks.
                    1) Each URL should be relative to the context path and must start with "/".
                    2) The individual url-patterns uses the ANT style patterns for pattern matching.
                </xsd:description>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="url-pattern" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
    </xsd:complexType>

    <xsd:complexType name="import">
        <xsd:annotation>
            <xsd:documentation>
                <xsd:description>
                    import is used to splits large xss-rules in severals files.
                    this has several usage scenario:
                    1) to share the common rules files
                    2) to use pseudo black list approach against common white list xss rules(e.g, whole html4 tag/atribute definition)
                    import refer to another xss config files. so this may introduce recursive(nested) reference. For the declaration, the refered xsd configuration will be first evaluated.
                    Therefore this will allow to override behavior of imported xssconfig file.(only the xss-rules declarations in the imported xss config xsl file will be used)

                    file: refers to the path of xss config file, e.g, resources/conf/bmwebsecurity/bmxsshtml4rules.xml.
                    name: refers to the name of xss-rules in the file. this is necessary since xss config xml may contain several xss-rules elements.
                </xsd:description>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="file" type="xsd:string" use="required"/>
        <xsd:attribute name="name" type="xsd:string" use="required"/>
    </xsd:complexType>

    <xsd:complexType name="accept-common-attr-rule">
        <xsd:annotation>
            <xsd:documentation>
                <xsd:description>
                    this defines a name of attribute to which (accept/reject) action will be taken.
                    this rule applies to all tags except tags listed in the except-tag elements.
                </xsd:description>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="attr-rule">
                <xsd:sequence>
                    <xsd:element name="except-tag" minOccurs="0" maxOccurs="unbounded">
                        <xsd:complexType >
                            <xsd:attribute name="name" type="xsd:string" use="required" />
                        </xsd:complexType>
                    </xsd:element>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>
    
    <xsd:complexType name="attr-rule">
        <xsd:annotation>
            <xsd:documentation>
                <xsd:description>
                    this defines a name of attribute to which (accept/reject) action will be taken.
                    in order to take this action, the attribute value must be matched to at least one of specified regexps.
                    If no regexp is specified, the action will be always taken.
                </xsd:description>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:sequence>
            <xsd:element name="regexp" type="xsd:string" minOccurs="0" maxOccurs="unbounded"/>
        </xsd:sequence>
        <xsd:attribute name="name" type="xsd:string" use="required" />
    </xsd:complexType>

    <xsd:complexType name="reject-common-attr-rule">
        <xsd:annotation>
            <xsd:documentation>
                <xsd:description>
                    this defines a name of attribute to be rejected.
                </xsd:description>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="name" type="xsd:string" use="required" />
    </xsd:complexType>

    <xsd:complexType name="tag-rule">
        <xsd:annotation>
            <xsd:documentation>
                <xsd:description>
                    this defines a name of tag
                </xsd:description>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:attribute name="name" type="xsd:string" use="required" />
    </xsd:complexType>

    <xsd:complexType name="accept-tag-rule">
        <xsd:annotation>
            <xsd:documentation>
                <xsd:description>
                    this defines a name of tag to be accepted,
                    and declares the attribues rules defined for the tag.
                    When no attribue rule is defined, all attributes of the tag are accepted.
                    'append' attribute defines how to add attribute rules. if it is true, declared attribute rules will be appended to the previous attribute rules.
                    if it is false, previous attribute rules are discarded, then only declared attribute rules are used.
                </xsd:description>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tag-rule">
                <xsd:sequence>
                    <xsd:element name="attr" type="attr-rule" minOccurs="0" maxOccurs="unbounded"/>
                </xsd:sequence>
            </xsd:extension>
        </xsd:complexContent>
    </xsd:complexType>

    <xsd:complexType name="reject-tag-rule">
        <xsd:annotation>
            <xsd:documentation>
                <xsd:description>
                    this defines a name of tag to be rejected.
                </xsd:description>
            </xsd:documentation>
        </xsd:annotation>
        <xsd:complexContent>
            <xsd:extension base="tag-rule"/>
        </xsd:complexContent>
    </xsd:complexType>


</xsd:schema>
